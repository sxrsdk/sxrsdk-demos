if (file("../../../extra_properties.gradle").exists()) {
    apply from: '../../../extra_properties.gradle'
}

if (file("../../../../extra_properties.gradle").exists()) {
    apply from: '../../../../extra_properties.gradle'
}

allprojects {
    repositories {
        jcenter()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots/"
        }
        maven {
            url "http://google.bintray.com/googlevr"
        }
        flatDir {
            dirs '../../sxrsdk/SXR/sxr-libs', '../../../sxrsdk/SXR/sxr-libs', '../../../../sxrsdk/SXR/sxr-libs', '../sxrsdk/SXR/sxr-libs'
        }
    }
}

android {
    compileSdkVersion 26

    buildTypes {
        debug {
            debuggable = true
            jniDebuggable = true
        }
        release {
            signingConfig signingConfigs.debug
        }
    }

    flavorDimensions "vr"

    productFlavors {
        monoscopic {
            dimension "vr"
            applicationIdSuffix ".monoscopic"
            versionNameSuffix "-monoscopic"
            manifestPlaceholders = [metaDataName: "dummy", metaDataValue: "notapplicable"]
            resValue 'string', 'app_name', System.getProperty("appName") + "-monoscopic"

            ndk {
                if (project.hasProperty("SXRSDK_ABI_FILTER")) {
                    abiFilters project.property("SXRSDK_ABI_FILTER")
                } else {
                    abiFilters "armeabi-v7a", "arm64-v8a", "x86", "x86_64"
                }
            }
        }
        daydream {
            dimension "vr"
            applicationIdSuffix ".daydream"
            versionNameSuffix "-daydream"
            manifestPlaceholders = [metaDataName: "dummy", metaDataValue: "notapplicable"]
            resValue 'string', 'app_name', System.getProperty("appName") + "-daydream"

            ndk {
                if (project.hasProperty("SXRSDK_ABI_FILTER")) {
                    abiFilters project.property("SXRSDK_ABI_FILTER")
                } else {
                    abiFilters "armeabi-v7a", "arm64-v8a"
                }
            }
        }
        oculus {
            dimension "vr"
            applicationIdSuffix ".oculus"
            versionNameSuffix "-oculus"
            manifestPlaceholders = [metaDataName: "com.samsung.android.vr.application.mode", metaDataValue: "vr_only"]
            resValue 'string', 'app_name', System.getProperty("appName") + "-oculus"

            ndk {
                if (project.hasProperty("SXRSDK_ABI_FILTER")) {
                    abiFilters project.property("SXRSDK_ABI_FILTER")
                } else {
                    abiFilters "armeabi-v7a", "arm64-v8a"
                }
            }
        }
        ar {
            dimension "vr"
            applicationIdSuffix ".ar"
            versionNameSuffix "-ar"
            manifestPlaceholders = [metaDataName: "com.samsung.android.sxr.application.type", metaDataValue: "ar"]
            resValue 'string', 'app_name', System.getProperty("appName") + "-ar"

             ndk {
                if (project.hasProperty("SXRSDK_ABI_FILTER")) {
                    abiFilters project.property("SXRSDK_ABI_FILTER")
                } else {
                    abiFilters "armeabi-v7a", "arm64-v8a"
                }
             }
        }
    }

    defaultConfig {
        minSdkVersion 23
        targetSdkVersion 23
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            output.outputFileName = System.getProperty("appName") + ".apk"
        }
    }

    packagingOptions {
        pickFirst 'lib/*/libc++_shared.so'
    }
}

task copyOculusSignature(type: Copy) {
    if (project.hasProperty("OCULUS_SIGS_DIRECTORY")) {
        copy {
            from project.property("OCULUS_SIGS_DIRECTORY")
            into 'src/main/assets'
            include 'oculussig_*'
        }
    }
}

preBuild {}.dependsOn copyOculusSignature

file("../../..").eachDir {
    def fn = it.toString() + "/sxrsdk-demos_build.gradle"
    if (file(fn).exists()) {
        apply from: fn
        println "importing build file from " + it.toString()
    }
}


ext.sxrVersion = '5.0.1-SNAPSHOT'
project.ext.daydreamVersion = '1.130.0'
project.ext.jomlVersion = "1.9.3-SNAPSHOT"
project.ext.gsonVersion = '2.8.2'

dependencies {
    implementation "com.google.code.gson:gson:$gsonVersion"
    implementation "org.joml:joml-android:${jomlVersion}"

    if (project.hasProperty("useLocalDependencies") && project.useLocalDependencies) {
        if (findProject(':sxrsdk')) {
            implementation project(':sxrsdk')
        } else {
            debugImplementation(name: 'sxrsdk-debug', ext: 'aar')
            releaseImplementation(name: 'sxrsdk-release', ext: 'aar')
        }
    } else {
        implementation "com.samsungxr:sxrsdk:$sxrVersion"
    }

    if (project.hasProperty("useLocalDependencies") && project.useLocalDependencies) {
        if (findProject(':backend_monoscopic')) {
            monoscopicImplementation project(':backend_monoscopic')
        } else {
            monoscopicImplementation(':backend_monoscopic-release@aar')
        }
    } else {
        monoscopicImplementation "com.samsungxr:backend_monoscopic:$sxrVersion"
    }

    if (project.hasProperty("useLocalDependencies") && project.useLocalDependencies) {
        if (findProject(':backend_daydream')) {
            daydreamImplementation project(':backend_daydream')
        } else {
            daydreamImplementation(':backend_daydream-release@aar')
        }
    } else {
        daydreamImplementation "com.samsungxr:backend_daydream:$sxrVersion"
    }
    daydreamImplementation "com.google.vr:sdk-base:${daydreamVersion}"
    daydreamImplementation "com.google.vr:sdk-controller:${daydreamVersion}"

    if (project.hasProperty("useLocalDependencies") && project.useLocalDependencies) {
        if (findProject(':backend_oculus')) {
            oculusImplementation project(':backend_oculus')
        } else {
            oculusImplementation(':backend_oculus-release@aar')
        }
    } else {
        oculusImplementation "com.samsungxr:backend_oculus:$sxrVersion"
    }
    arImplementation 'com.google.protobuf:protobuf-lite:3.0.0'
    if (project.hasProperty("useLocalDependencies") && project.useLocalDependencies) {
        if (findProject(':sxr_adapter')) {
            arImplementation project(':sxr_adapter')
            if (rootProject.hasProperty("sxr_runtime_as_apk") && rootProject.property("sxr_runtime_as_apk")) {
                arImplementation project(':sxr_runtime_frameregulator')
                arImplementation project(':sxr_runtime_configuration')
            }
        } else {
            arImplementation(':sxr_adapter-release@aar')
            if (rootProject.hasProperty("sxr_runtime_as_apk") && rootProject.property("sxr_runtime_as_apk")) {
                arImplementation(':sxr_runtime_frameregulator-release@aar')
                arImplementation(':sxr_runtime_configuration-release@aar')
            }
        }
    } else {
        throw new GradleException("sxr runtime not available from maven")
    }
}

